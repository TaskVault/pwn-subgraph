"""
creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API.
"""
directive @derivedFrom(field: String!) on FIELD_DEFINITION

"""
Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive.
"""
directive @entity on OBJECT

"""Defined a Subgraph ID for an object type"""
directive @subgraphId(id: String!) on OBJECT

type Account {
  """ loans borrowed """
  borrowed(first: Int = 100, orderBy: Loan_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: Loan_filter): [Loan!]!

  """ account address """
  id: Bytes!

  """ loans lent """
  lended(first: Int = 100, orderBy: Loan_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: Loan_filter): [Loan!]!

  """ total loans borrowed """
  totalBorrowedLoans: BigInt!

  """ total loans lent """
  totalLendedLoans: BigInt!
}

input Account_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Account_filter]
  borrowed_: Loan_filter
  id: Bytes
  id_contains: Bytes
  id_gt: Bytes
  id_gte: Bytes
  id_in: [Bytes!]
  id_lt: Bytes
  id_lte: Bytes
  id_not: Bytes
  id_not_contains: Bytes
  id_not_in: [Bytes!]
  lended_: Loan_filter
  or: [Account_filter]
  totalBorrowedLoans: BigInt
  totalBorrowedLoans_gt: BigInt
  totalBorrowedLoans_gte: BigInt
  totalBorrowedLoans_in: [BigInt!]
  totalBorrowedLoans_lt: BigInt
  totalBorrowedLoans_lte: BigInt
  totalBorrowedLoans_not: BigInt
  totalBorrowedLoans_not_in: [BigInt!]
  totalLendedLoans: BigInt
  totalLendedLoans_gt: BigInt
  totalLendedLoans_gte: BigInt
  totalLendedLoans_in: [BigInt!]
  totalLendedLoans_lt: BigInt
  totalLendedLoans_lte: BigInt
  totalLendedLoans_not: BigInt
  totalLendedLoans_not_in: [BigInt!]
}

enum Account_orderBy {
  borrowed
  id
  lended
  totalBorrowedLoans
  totalLendedLoans
}

enum Aggregation_interval {
  day
  hour
}

type Asset {
  """ asset category """
  category: AssetCategory!

  """ asset address """
  id: Bytes!

  """ token metadata if ERC20 """
  token: Token
}

enum AssetCategory {
  CryptoKitties
  ERC20
  ERC721
  ERC1155
}

input Asset_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Asset_filter]
  category: AssetCategory
  category_in: [AssetCategory!]
  category_not: AssetCategory
  category_not_in: [AssetCategory!]
  id: Bytes
  id_contains: Bytes
  id_gt: Bytes
  id_gte: Bytes
  id_in: [Bytes!]
  id_lt: Bytes
  id_lte: Bytes
  id_not: Bytes
  id_not_contains: Bytes
  id_not_in: [Bytes!]
  or: [Asset_filter]
  token: String
  token_: Token_filter
  token_contains: String
  token_contains_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_gt: String
  token_gte: String
  token_in: [String!]
  token_lt: String
  token_lte: String
  token_not: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_not_in: [String!]
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
}

enum Asset_orderBy {
  category
  id
  token
  token__decimals
  token__id
  token__name
  token__symbol
}

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

scalar Bytes

"""
8 bytes signed integer

"""
scalar Int8

type Loan {
  """ loan borrow asset amount """
  borrowAmount: BigDecimal!

  """ loan borrow asset """
  borrowAsset: Asset!

  """ loan borrower """
  borrower: Account!

  """ loan collateral asset """
  collateral: Asset!

  """ loan collateral asset amount """
  collateralAmount: BigInt

  """ loan collateral token id if NFT """
  collateralTokenId: BigInt

  """ created date (timestamp) """
  createdDate: BigInt!

  """ loan expiration """
  expiration: BigInt!

  """ loan id """
  id: ID!

  """ loan lender """
  lender: Account!

  """ loan claimed events """
  loanClaimedEvents(first: Int = 100, orderBy: LoanClaimedEvent_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: LoanClaimedEvent_filter): [LoanClaimedEvent!]!

  """ loan claimed events """
  loanCreatedEvents(first: Int = 100, orderBy: LoanCreatedEvent_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: LoanCreatedEvent_filter): [LoanCreatedEvent!]!

  """ loan expiration date extended events """
  loanExpirationDateExtendedEvents(first: Int = 100, orderBy: LoanExpirationDateExtendedEvent_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: LoanExpirationDateExtendedEvent_filter): [LoanExpirationDateExtendedEvent!]!

  """ loan paid back events """
  loanPaidBackEvents(first: Int = 100, orderBy: LoanPaidBackEvent_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: LoanPaidBackEvent_filter): [LoanPaidBackEvent!]!

  """ repaid date (timestamp)"""
  repaidDate: BigInt

  """ loan repay amount """
  repayAmount: BigDecimal!

  """ loan status """
  status: LoanStatus!
}

type LoanClaimedEvent {
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  defaulted: Boolean!
  id: Bytes!
  loan: Loan!
  transactionHash: Bytes!
}

input LoanClaimedEvent_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [LoanClaimedEvent_filter]
  blockNumber: BigInt
  blockNumber_gt: BigInt
  blockNumber_gte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_lt: BigInt
  blockNumber_lte: BigInt
  blockNumber_not: BigInt
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_lt: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_not_in: [BigInt!]
  defaulted: Boolean
  defaulted_in: [Boolean!]
  defaulted_not: Boolean
  defaulted_not_in: [Boolean!]
  id: Bytes
  id_contains: Bytes
  id_gt: Bytes
  id_gte: Bytes
  id_in: [Bytes!]
  id_lt: Bytes
  id_lte: Bytes
  id_not: Bytes
  id_not_contains: Bytes
  id_not_in: [Bytes!]
  loan: String
  loan_: Loan_filter
  loan_contains: String
  loan_contains_nocase: String
  loan_ends_with: String
  loan_ends_with_nocase: String
  loan_gt: String
  loan_gte: String
  loan_in: [String!]
  loan_lt: String
  loan_lte: String
  loan_not: String
  loan_not_contains: String
  loan_not_contains_nocase: String
  loan_not_ends_with: String
  loan_not_ends_with_nocase: String
  loan_not_in: [String!]
  loan_not_starts_with: String
  loan_not_starts_with_nocase: String
  loan_starts_with: String
  loan_starts_with_nocase: String
  or: [LoanClaimedEvent_filter]
  transactionHash: Bytes
  transactionHash_contains: Bytes
  transactionHash_gt: Bytes
  transactionHash_gte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_lt: Bytes
  transactionHash_lte: Bytes
  transactionHash_not: Bytes
  transactionHash_not_contains: Bytes
  transactionHash_not_in: [Bytes!]
}

enum LoanClaimedEvent_orderBy {
  blockNumber
  blockTimestamp
  defaulted
  id
  loan
  loan__borrowAmount
  loan__collateralAmount
  loan__collateralTokenId
  loan__createdDate
  loan__expiration
  loan__id
  loan__repaidDate
  loan__repayAmount
  loan__status
  transactionHash
}

type LoanCreatedEvent {
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  factoryAddress: Bytes!
  factoryDataHash: Bytes!
  id: Bytes!
  loan: Loan!
  terms_asset_amount: BigInt!
  terms_asset_assetAddress: Bytes!
  terms_asset_category: Int!
  terms_asset_id: BigInt!
  terms_borrower: Bytes!
  terms_collateral_amount: BigInt!
  terms_collateral_assetAddress: Bytes!
  terms_collateral_category: Int!
  terms_collateral_id: BigInt!
  terms_expiration: BigInt!
  terms_lender: Bytes!
  terms_loanRepayAmount: BigInt!
  transactionHash: Bytes!
}

input LoanCreatedEvent_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [LoanCreatedEvent_filter]
  blockNumber: BigInt
  blockNumber_gt: BigInt
  blockNumber_gte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_lt: BigInt
  blockNumber_lte: BigInt
  blockNumber_not: BigInt
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_lt: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_not_in: [BigInt!]
  factoryAddress: Bytes
  factoryAddress_contains: Bytes
  factoryAddress_gt: Bytes
  factoryAddress_gte: Bytes
  factoryAddress_in: [Bytes!]
  factoryAddress_lt: Bytes
  factoryAddress_lte: Bytes
  factoryAddress_not: Bytes
  factoryAddress_not_contains: Bytes
  factoryAddress_not_in: [Bytes!]
  factoryDataHash: Bytes
  factoryDataHash_contains: Bytes
  factoryDataHash_gt: Bytes
  factoryDataHash_gte: Bytes
  factoryDataHash_in: [Bytes!]
  factoryDataHash_lt: Bytes
  factoryDataHash_lte: Bytes
  factoryDataHash_not: Bytes
  factoryDataHash_not_contains: Bytes
  factoryDataHash_not_in: [Bytes!]
  id: Bytes
  id_contains: Bytes
  id_gt: Bytes
  id_gte: Bytes
  id_in: [Bytes!]
  id_lt: Bytes
  id_lte: Bytes
  id_not: Bytes
  id_not_contains: Bytes
  id_not_in: [Bytes!]
  loan: String
  loan_: Loan_filter
  loan_contains: String
  loan_contains_nocase: String
  loan_ends_with: String
  loan_ends_with_nocase: String
  loan_gt: String
  loan_gte: String
  loan_in: [String!]
  loan_lt: String
  loan_lte: String
  loan_not: String
  loan_not_contains: String
  loan_not_contains_nocase: String
  loan_not_ends_with: String
  loan_not_ends_with_nocase: String
  loan_not_in: [String!]
  loan_not_starts_with: String
  loan_not_starts_with_nocase: String
  loan_starts_with: String
  loan_starts_with_nocase: String
  or: [LoanCreatedEvent_filter]
  terms_asset_amount: BigInt
  terms_asset_amount_gt: BigInt
  terms_asset_amount_gte: BigInt
  terms_asset_amount_in: [BigInt!]
  terms_asset_amount_lt: BigInt
  terms_asset_amount_lte: BigInt
  terms_asset_amount_not: BigInt
  terms_asset_amount_not_in: [BigInt!]
  terms_asset_assetAddress: Bytes
  terms_asset_assetAddress_contains: Bytes
  terms_asset_assetAddress_gt: Bytes
  terms_asset_assetAddress_gte: Bytes
  terms_asset_assetAddress_in: [Bytes!]
  terms_asset_assetAddress_lt: Bytes
  terms_asset_assetAddress_lte: Bytes
  terms_asset_assetAddress_not: Bytes
  terms_asset_assetAddress_not_contains: Bytes
  terms_asset_assetAddress_not_in: [Bytes!]
  terms_asset_category: Int
  terms_asset_category_gt: Int
  terms_asset_category_gte: Int
  terms_asset_category_in: [Int!]
  terms_asset_category_lt: Int
  terms_asset_category_lte: Int
  terms_asset_category_not: Int
  terms_asset_category_not_in: [Int!]
  terms_asset_id: BigInt
  terms_asset_id_gt: BigInt
  terms_asset_id_gte: BigInt
  terms_asset_id_in: [BigInt!]
  terms_asset_id_lt: BigInt
  terms_asset_id_lte: BigInt
  terms_asset_id_not: BigInt
  terms_asset_id_not_in: [BigInt!]
  terms_borrower: Bytes
  terms_borrower_contains: Bytes
  terms_borrower_gt: Bytes
  terms_borrower_gte: Bytes
  terms_borrower_in: [Bytes!]
  terms_borrower_lt: Bytes
  terms_borrower_lte: Bytes
  terms_borrower_not: Bytes
  terms_borrower_not_contains: Bytes
  terms_borrower_not_in: [Bytes!]
  terms_collateral_amount: BigInt
  terms_collateral_amount_gt: BigInt
  terms_collateral_amount_gte: BigInt
  terms_collateral_amount_in: [BigInt!]
  terms_collateral_amount_lt: BigInt
  terms_collateral_amount_lte: BigInt
  terms_collateral_amount_not: BigInt
  terms_collateral_amount_not_in: [BigInt!]
  terms_collateral_assetAddress: Bytes
  terms_collateral_assetAddress_contains: Bytes
  terms_collateral_assetAddress_gt: Bytes
  terms_collateral_assetAddress_gte: Bytes
  terms_collateral_assetAddress_in: [Bytes!]
  terms_collateral_assetAddress_lt: Bytes
  terms_collateral_assetAddress_lte: Bytes
  terms_collateral_assetAddress_not: Bytes
  terms_collateral_assetAddress_not_contains: Bytes
  terms_collateral_assetAddress_not_in: [Bytes!]
  terms_collateral_category: Int
  terms_collateral_category_gt: Int
  terms_collateral_category_gte: Int
  terms_collateral_category_in: [Int!]
  terms_collateral_category_lt: Int
  terms_collateral_category_lte: Int
  terms_collateral_category_not: Int
  terms_collateral_category_not_in: [Int!]
  terms_collateral_id: BigInt
  terms_collateral_id_gt: BigInt
  terms_collateral_id_gte: BigInt
  terms_collateral_id_in: [BigInt!]
  terms_collateral_id_lt: BigInt
  terms_collateral_id_lte: BigInt
  terms_collateral_id_not: BigInt
  terms_collateral_id_not_in: [BigInt!]
  terms_expiration: BigInt
  terms_expiration_gt: BigInt
  terms_expiration_gte: BigInt
  terms_expiration_in: [BigInt!]
  terms_expiration_lt: BigInt
  terms_expiration_lte: BigInt
  terms_expiration_not: BigInt
  terms_expiration_not_in: [BigInt!]
  terms_lender: Bytes
  terms_lender_contains: Bytes
  terms_lender_gt: Bytes
  terms_lender_gte: Bytes
  terms_lender_in: [Bytes!]
  terms_lender_lt: Bytes
  terms_lender_lte: Bytes
  terms_lender_not: Bytes
  terms_lender_not_contains: Bytes
  terms_lender_not_in: [Bytes!]
  terms_loanRepayAmount: BigInt
  terms_loanRepayAmount_gt: BigInt
  terms_loanRepayAmount_gte: BigInt
  terms_loanRepayAmount_in: [BigInt!]
  terms_loanRepayAmount_lt: BigInt
  terms_loanRepayAmount_lte: BigInt
  terms_loanRepayAmount_not: BigInt
  terms_loanRepayAmount_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_contains: Bytes
  transactionHash_gt: Bytes
  transactionHash_gte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_lt: Bytes
  transactionHash_lte: Bytes
  transactionHash_not: Bytes
  transactionHash_not_contains: Bytes
  transactionHash_not_in: [Bytes!]
}

enum LoanCreatedEvent_orderBy {
  blockNumber
  blockTimestamp
  factoryAddress
  factoryDataHash
  id
  loan
  loan__borrowAmount
  loan__collateralAmount
  loan__collateralTokenId
  loan__createdDate
  loan__expiration
  loan__id
  loan__repaidDate
  loan__repayAmount
  loan__status
  terms_asset_amount
  terms_asset_assetAddress
  terms_asset_category
  terms_asset_id
  terms_borrower
  terms_collateral_amount
  terms_collateral_assetAddress
  terms_collateral_category
  terms_collateral_id
  terms_expiration
  terms_lender
  terms_loanRepayAmount
  transactionHash
}

type LoanExpirationDateExtendedEvent {
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  extendedExpirationDate: BigInt!
  id: Bytes!
  loan: Loan!
  transactionHash: Bytes!
}

input LoanExpirationDateExtendedEvent_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [LoanExpirationDateExtendedEvent_filter]
  blockNumber: BigInt
  blockNumber_gt: BigInt
  blockNumber_gte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_lt: BigInt
  blockNumber_lte: BigInt
  blockNumber_not: BigInt
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_lt: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_not_in: [BigInt!]
  extendedExpirationDate: BigInt
  extendedExpirationDate_gt: BigInt
  extendedExpirationDate_gte: BigInt
  extendedExpirationDate_in: [BigInt!]
  extendedExpirationDate_lt: BigInt
  extendedExpirationDate_lte: BigInt
  extendedExpirationDate_not: BigInt
  extendedExpirationDate_not_in: [BigInt!]
  id: Bytes
  id_contains: Bytes
  id_gt: Bytes
  id_gte: Bytes
  id_in: [Bytes!]
  id_lt: Bytes
  id_lte: Bytes
  id_not: Bytes
  id_not_contains: Bytes
  id_not_in: [Bytes!]
  loan: String
  loan_: Loan_filter
  loan_contains: String
  loan_contains_nocase: String
  loan_ends_with: String
  loan_ends_with_nocase: String
  loan_gt: String
  loan_gte: String
  loan_in: [String!]
  loan_lt: String
  loan_lte: String
  loan_not: String
  loan_not_contains: String
  loan_not_contains_nocase: String
  loan_not_ends_with: String
  loan_not_ends_with_nocase: String
  loan_not_in: [String!]
  loan_not_starts_with: String
  loan_not_starts_with_nocase: String
  loan_starts_with: String
  loan_starts_with_nocase: String
  or: [LoanExpirationDateExtendedEvent_filter]
  transactionHash: Bytes
  transactionHash_contains: Bytes
  transactionHash_gt: Bytes
  transactionHash_gte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_lt: Bytes
  transactionHash_lte: Bytes
  transactionHash_not: Bytes
  transactionHash_not_contains: Bytes
  transactionHash_not_in: [Bytes!]
}

enum LoanExpirationDateExtendedEvent_orderBy {
  blockNumber
  blockTimestamp
  extendedExpirationDate
  id
  loan
  loan__borrowAmount
  loan__collateralAmount
  loan__collateralTokenId
  loan__createdDate
  loan__expiration
  loan__id
  loan__repaidDate
  loan__repayAmount
  loan__status
  transactionHash
}

type LoanPaidBackEvent {
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  id: Bytes!
  loan: Loan!
  transactionHash: Bytes!
}

input LoanPaidBackEvent_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [LoanPaidBackEvent_filter]
  blockNumber: BigInt
  blockNumber_gt: BigInt
  blockNumber_gte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_lt: BigInt
  blockNumber_lte: BigInt
  blockNumber_not: BigInt
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_lt: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_not_in: [BigInt!]
  id: Bytes
  id_contains: Bytes
  id_gt: Bytes
  id_gte: Bytes
  id_in: [Bytes!]
  id_lt: Bytes
  id_lte: Bytes
  id_not: Bytes
  id_not_contains: Bytes
  id_not_in: [Bytes!]
  loan: String
  loan_: Loan_filter
  loan_contains: String
  loan_contains_nocase: String
  loan_ends_with: String
  loan_ends_with_nocase: String
  loan_gt: String
  loan_gte: String
  loan_in: [String!]
  loan_lt: String
  loan_lte: String
  loan_not: String
  loan_not_contains: String
  loan_not_contains_nocase: String
  loan_not_ends_with: String
  loan_not_ends_with_nocase: String
  loan_not_in: [String!]
  loan_not_starts_with: String
  loan_not_starts_with_nocase: String
  loan_starts_with: String
  loan_starts_with_nocase: String
  or: [LoanPaidBackEvent_filter]
  transactionHash: Bytes
  transactionHash_contains: Bytes
  transactionHash_gt: Bytes
  transactionHash_gte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_lt: Bytes
  transactionHash_lte: Bytes
  transactionHash_not: Bytes
  transactionHash_not_contains: Bytes
  transactionHash_not_in: [Bytes!]
}

enum LoanPaidBackEvent_orderBy {
  blockNumber
  blockTimestamp
  id
  loan
  loan__borrowAmount
  loan__collateralAmount
  loan__collateralTokenId
  loan__createdDate
  loan__expiration
  loan__id
  loan__repaidDate
  loan__repayAmount
  loan__status
  transactionHash
}

enum LoanStatus {
  DEFAULTED
  REPAID
  RUNNING
}

input Loan_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Loan_filter]
  borrowAmount: BigDecimal
  borrowAmount_gt: BigDecimal
  borrowAmount_gte: BigDecimal
  borrowAmount_in: [BigDecimal!]
  borrowAmount_lt: BigDecimal
  borrowAmount_lte: BigDecimal
  borrowAmount_not: BigDecimal
  borrowAmount_not_in: [BigDecimal!]
  borrowAsset: String
  borrowAsset_: Asset_filter
  borrowAsset_contains: String
  borrowAsset_contains_nocase: String
  borrowAsset_ends_with: String
  borrowAsset_ends_with_nocase: String
  borrowAsset_gt: String
  borrowAsset_gte: String
  borrowAsset_in: [String!]
  borrowAsset_lt: String
  borrowAsset_lte: String
  borrowAsset_not: String
  borrowAsset_not_contains: String
  borrowAsset_not_contains_nocase: String
  borrowAsset_not_ends_with: String
  borrowAsset_not_ends_with_nocase: String
  borrowAsset_not_in: [String!]
  borrowAsset_not_starts_with: String
  borrowAsset_not_starts_with_nocase: String
  borrowAsset_starts_with: String
  borrowAsset_starts_with_nocase: String
  borrower: String
  borrower_: Account_filter
  borrower_contains: String
  borrower_contains_nocase: String
  borrower_ends_with: String
  borrower_ends_with_nocase: String
  borrower_gt: String
  borrower_gte: String
  borrower_in: [String!]
  borrower_lt: String
  borrower_lte: String
  borrower_not: String
  borrower_not_contains: String
  borrower_not_contains_nocase: String
  borrower_not_ends_with: String
  borrower_not_ends_with_nocase: String
  borrower_not_in: [String!]
  borrower_not_starts_with: String
  borrower_not_starts_with_nocase: String
  borrower_starts_with: String
  borrower_starts_with_nocase: String
  collateral: String
  collateralAmount: BigInt
  collateralAmount_gt: BigInt
  collateralAmount_gte: BigInt
  collateralAmount_in: [BigInt!]
  collateralAmount_lt: BigInt
  collateralAmount_lte: BigInt
  collateralAmount_not: BigInt
  collateralAmount_not_in: [BigInt!]
  collateralTokenId: BigInt
  collateralTokenId_gt: BigInt
  collateralTokenId_gte: BigInt
  collateralTokenId_in: [BigInt!]
  collateralTokenId_lt: BigInt
  collateralTokenId_lte: BigInt
  collateralTokenId_not: BigInt
  collateralTokenId_not_in: [BigInt!]
  collateral_: Asset_filter
  collateral_contains: String
  collateral_contains_nocase: String
  collateral_ends_with: String
  collateral_ends_with_nocase: String
  collateral_gt: String
  collateral_gte: String
  collateral_in: [String!]
  collateral_lt: String
  collateral_lte: String
  collateral_not: String
  collateral_not_contains: String
  collateral_not_contains_nocase: String
  collateral_not_ends_with: String
  collateral_not_ends_with_nocase: String
  collateral_not_in: [String!]
  collateral_not_starts_with: String
  collateral_not_starts_with_nocase: String
  collateral_starts_with: String
  collateral_starts_with_nocase: String
  createdDate: BigInt
  createdDate_gt: BigInt
  createdDate_gte: BigInt
  createdDate_in: [BigInt!]
  createdDate_lt: BigInt
  createdDate_lte: BigInt
  createdDate_not: BigInt
  createdDate_not_in: [BigInt!]
  expiration: BigInt
  expiration_gt: BigInt
  expiration_gte: BigInt
  expiration_in: [BigInt!]
  expiration_lt: BigInt
  expiration_lte: BigInt
  expiration_not: BigInt
  expiration_not_in: [BigInt!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  lender: String
  lender_: Account_filter
  lender_contains: String
  lender_contains_nocase: String
  lender_ends_with: String
  lender_ends_with_nocase: String
  lender_gt: String
  lender_gte: String
  lender_in: [String!]
  lender_lt: String
  lender_lte: String
  lender_not: String
  lender_not_contains: String
  lender_not_contains_nocase: String
  lender_not_ends_with: String
  lender_not_ends_with_nocase: String
  lender_not_in: [String!]
  lender_not_starts_with: String
  lender_not_starts_with_nocase: String
  lender_starts_with: String
  lender_starts_with_nocase: String
  loanClaimedEvents_: LoanClaimedEvent_filter
  loanCreatedEvents_: LoanCreatedEvent_filter
  loanExpirationDateExtendedEvents_: LoanExpirationDateExtendedEvent_filter
  loanPaidBackEvents_: LoanPaidBackEvent_filter
  or: [Loan_filter]
  repaidDate: BigInt
  repaidDate_gt: BigInt
  repaidDate_gte: BigInt
  repaidDate_in: [BigInt!]
  repaidDate_lt: BigInt
  repaidDate_lte: BigInt
  repaidDate_not: BigInt
  repaidDate_not_in: [BigInt!]
  repayAmount: BigDecimal
  repayAmount_gt: BigDecimal
  repayAmount_gte: BigDecimal
  repayAmount_in: [BigDecimal!]
  repayAmount_lt: BigDecimal
  repayAmount_lte: BigDecimal
  repayAmount_not: BigDecimal
  repayAmount_not_in: [BigDecimal!]
  status: LoanStatus
  status_in: [LoanStatus!]
  status_not: LoanStatus
  status_not_in: [LoanStatus!]
}

enum Loan_orderBy {
  borrowAmount
  borrowAsset
  borrowAsset__category
  borrowAsset__id
  borrower
  borrower__id
  borrower__totalBorrowedLoans
  borrower__totalLendedLoans
  collateral
  collateralAmount
  collateralTokenId
  collateral__category
  collateral__id
  createdDate
  expiration
  id
  lender
  lender__id
  lender__totalBorrowedLoans
  lender__totalLendedLoans
  loanClaimedEvents
  loanCreatedEvents
  loanExpirationDateExtendedEvents
  loanPaidBackEvents
  repaidDate
  repayAmount
  status
}

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type Query {
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
  account(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Account
  accounts(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Account_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Account_filter
  ): [Account!]!
  asset(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Asset
  assets(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Asset_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Asset_filter
  ): [Asset!]!
  loan(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Loan
  loanClaimedEvent(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LoanClaimedEvent
  loanClaimedEvents(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: LoanClaimedEvent_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: LoanClaimedEvent_filter
  ): [LoanClaimedEvent!]!
  loanCreatedEvent(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LoanCreatedEvent
  loanCreatedEvents(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: LoanCreatedEvent_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: LoanCreatedEvent_filter
  ): [LoanCreatedEvent!]!
  loanExpirationDateExtendedEvent(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LoanExpirationDateExtendedEvent
  loanExpirationDateExtendedEvents(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: LoanExpirationDateExtendedEvent_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: LoanExpirationDateExtendedEvent_filter
  ): [LoanExpirationDateExtendedEvent!]!
  loanPaidBackEvent(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LoanPaidBackEvent
  loanPaidBackEvents(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: LoanPaidBackEvent_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: LoanPaidBackEvent_filter
  ): [LoanPaidBackEvent!]!
  loans(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Loan_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Loan_filter
  ): [Loan!]!
  token(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Token
  tokens(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Token_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Token_filter
  ): [Token!]!
}

type Subscription {
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
  account(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Account
  accounts(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Account_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Account_filter
  ): [Account!]!
  asset(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Asset
  assets(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Asset_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Asset_filter
  ): [Asset!]!
  loan(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Loan
  loanClaimedEvent(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LoanClaimedEvent
  loanClaimedEvents(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: LoanClaimedEvent_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: LoanClaimedEvent_filter
  ): [LoanClaimedEvent!]!
  loanCreatedEvent(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LoanCreatedEvent
  loanCreatedEvents(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: LoanCreatedEvent_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: LoanCreatedEvent_filter
  ): [LoanCreatedEvent!]!
  loanExpirationDateExtendedEvent(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LoanExpirationDateExtendedEvent
  loanExpirationDateExtendedEvents(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: LoanExpirationDateExtendedEvent_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: LoanExpirationDateExtendedEvent_filter
  ): [LoanExpirationDateExtendedEvent!]!
  loanPaidBackEvent(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LoanPaidBackEvent
  loanPaidBackEvents(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: LoanPaidBackEvent_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: LoanPaidBackEvent_filter
  ): [LoanPaidBackEvent!]!
  loans(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Loan_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Loan_filter
  ): [Loan!]!
  token(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Token
  tokens(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Token_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Token_filter
  ): [Token!]!
}

"""
A string representation of microseconds UNIX timestamp (16 digits)

"""
scalar Timestamp

type Token {
  """ token decimals """
  decimals: Int!

  """ token address """
  id: Bytes!

  """ token name """
  name: String!

  """ token symbol """
  symbol: String!
}

input Token_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Token_filter]
  decimals: Int
  decimals_gt: Int
  decimals_gte: Int
  decimals_in: [Int!]
  decimals_lt: Int
  decimals_lte: Int
  decimals_not: Int
  decimals_not_in: [Int!]
  id: Bytes
  id_contains: Bytes
  id_gt: Bytes
  id_gte: Bytes
  id_in: [Bytes!]
  id_lt: Bytes
  id_lte: Bytes
  id_not: Bytes
  id_not_contains: Bytes
  id_not_in: [Bytes!]
  name: String
  name_contains: String
  name_contains_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  or: [Token_filter]
  symbol: String
  symbol_contains: String
  symbol_contains_nocase: String
  symbol_ends_with: String
  symbol_ends_with_nocase: String
  symbol_gt: String
  symbol_gte: String
  symbol_in: [String!]
  symbol_lt: String
  symbol_lte: String
  symbol_not: String
  symbol_not_contains: String
  symbol_not_contains_nocase: String
  symbol_not_ends_with: String
  symbol_not_ends_with_nocase: String
  symbol_not_in: [String!]
  symbol_not_starts_with: String
  symbol_not_starts_with_nocase: String
  symbol_starts_with: String
  symbol_starts_with_nocase: String
}

enum Token_orderBy {
  decimals
  id
  name
  symbol
}

type _Block_ {
  """The hash of the block"""
  hash: Bytes

  """The block number"""
  number: Int!

  """The hash of the parent block"""
  parentHash: Bytes

  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: _Block_!

  """The deployment ID"""
  deployment: String!

  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow

  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}
